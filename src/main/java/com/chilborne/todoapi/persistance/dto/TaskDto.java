package com.chilborne.todoapi.persistance.dto;

import com.chilborne.todoapi.persistance.model.ToDoList;
import com.chilborne.todoapi.persistance.validation.OnPersist;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.springframework.boot.convert.DataSizeUnit;

import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Null;
import javax.validation.constraints.Size;
import java.time.LocalDateTime;
import java.util.Objects;

public class TaskDto {

    public TaskDto() { }

    private long taskId;

    @NotBlank(message = "name is compulsory")
    private String name;

    @Size(min = 3, max = 255, message = "description should be between 3 and 255 characters long")
    private String description;

    @JsonFormat(pattern="dd-MM-yyyy HH:mm:ss")
    @Null(groups = OnPersist.class, message = "date_time_made is autogenerated on task creation")
    private LocalDateTime dateTimeMade;

    @JsonFormat(pattern="dd-MM-yyyy HH:mm:ss")
    @Null(groups = OnPersist.class, message = "date_time_finished is autogenerated on task completion")
    private LocalDateTime dateTimeFinished;

    @Null(groups = OnPersist.class, message = "active is automatically set to true on task creation")
    private boolean active;

    public long getTaskId() {
        return taskId;
    }

    public void setTaskId(long taskId) {
        this.taskId = taskId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public LocalDateTime getDateTimeMade() {
        return dateTimeMade != null ? dateTimeMade.withNano(0) : null;
    }

    public void setDateTimeMade(LocalDateTime dateTimeMade) {
        this.dateTimeMade = dateTimeMade;
    }

    public LocalDateTime getDateTimeFinished() {
        return dateTimeFinished != null ? dateTimeFinished.withNano(0) : null;
    }

    public void setDateTimeFinished(LocalDateTime dateTimeFinished) {
        this.dateTimeFinished = dateTimeFinished;
    }

    public boolean isActive() {
        return active;
    }

    public void setActive(boolean active) {
        this.active = active;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        TaskDto taskDTO = (TaskDto) o;

        if (taskId != taskDTO.taskId) return false;
        if (active != taskDTO.active) return false;
        if (!name.equals(taskDTO.name)) return false;
        if (!Objects.equals(description, taskDTO.description)) return false;
        if (!Objects.equals(dateTimeMade, taskDTO.dateTimeMade))
            return false;
        return Objects.equals(dateTimeFinished, taskDTO.dateTimeFinished);
    }

    @Override
    public int hashCode() {
        int result = (int) (taskId ^ (taskId >>> 32));
        result = 31 * result + name.hashCode();
        result = 31 * result + (description != null ? description.hashCode() : 0);
        result = 31 * result + (dateTimeMade != null ? dateTimeMade.hashCode() : 0);
        result = 31 * result + (dateTimeFinished != null ? dateTimeFinished.hashCode() : 0);
        result = 31 * result + (active ? 1 : 0);
        return result;
    }
}
